name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Setup environment
        run: |
          echo "CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}" >> $env:GITHUB_ENV
          echo "BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> $env:GITHUB_ENV
          echo "RDP_CREDS=User: RDP | Password: Poka1337" >> $env:GITHUB_ENV

      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          net user RDP Poka1337 /add
          net localgroup administrators RDP /add

      - name: Install Tailscale
        run: |
          Invoke-WebRequest https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi -OutFile tailscale.msi
          Start-Process msiexec.exe -ArgumentList '/i tailscale.msi /quiet /norestart' -Wait
          Start-Sleep -Seconds 10

      - name: Tailscale Login
        id: tailscale
        shell: pwsh
        run: |
          if ("${{ secrets.TAILSCALE_AUTH_KEY }}" -ne "") {
            # Auto login with auth key
            & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
            echo "MESSAGE=✅ Auto login with Tailscale Auth Key successful." >> $env:GITHUB_ENV
          } else {
            # Manual login
            $out = & "$env:ProgramFiles\Tailscale\tailscale.exe" up --hostname=gh-runner-$env:GITHUB_RUN_ID
            $loginUrl = ($out | Select-String "https://login.tailscale.com" | ForEach-Object { $_.ToString().Trim() })
            echo "MESSAGE=⚠️ Manual login required: $loginUrl" >> $env:GITHUB_ENV
          }

      - name: Send Telegram (Login Info)
        run: |
          $url = "https://api.telegram.org/bot${env:BOT_TOKEN}/sendMessage"
          $payload = @{
            chat_id = "${env:CHAT_ID}"
            text    = "${env:MESSAGE}`n`${env:RDP_CREDS}"
          }
          Invoke-RestMethod -Uri $url -Method Post -Body $payload

      - name: Wait before status check
        run: Start-Sleep -Seconds 300   # 5 minutes

      - name: Check Tailscale Status
        id: check
        shell: pwsh
        run: |
          $tsStatus = & "$env:ProgramFiles\Tailscale\tailscale.exe" status
          if ($tsStatus -match "logged in") {
            $msg = "✅ Tailscale is connected. RDP should be accessible at: $(hostname)"
          } else {
            $msg = "❌ Tailscale is NOT connected yet. Please login manually."
          }
          echo "STATUS_MSG=$msg" >> $env:GITHUB_ENV

      - name: Send Telegram (Status)
        run: |
          $url = "https://api.telegram.org/bot${env:BOT_TOKEN}/sendMessage"
          $payload = @{
            chat_id = "${env:CHAT_ID}"
            text    = "${env:STATUS_MSG}"
          }
          Invoke-RestMethod -Uri $url -Method Post -Body $payload
